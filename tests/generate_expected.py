#!/usr/bin/env python
# Tai Sakuma <tai.sakuma@gmail.com>
import os, sys

import numpy as np

from conftest import tbl_scan_event as tbl_scan_event_
from conftest import tbl_scan_jet as tbl_scan_jet_
from dump import dump_altdphi

here = os.path.abspath(os.path.dirname(__file__))
sys.path.insert(1, os.path.dirname(here))
from altdphi import AltDphi

##__________________________________________________________________||
expected_py_head = """
# this file is generated by {}
import numpy as np

try:
    import unittest.mock as mock
except ImportError:
    import mock
""".format(os.path.basename(__file__))
expected_py_head = expected_py_head.lstrip()

##__________________________________________________________________||
def main():

    expected_str = compose_expected_str()

    print expected_py_head
    print expected_str

##__________________________________________________________________||
def compose_expected_str():

    tbl_scan_event = tbl_scan_event_()
    tbl_scan_jet = tbl_scan_jet_()

    njet_name_dict = {0: 'nojet', 1: 'monojet', 2: 'two_jets', 3: 'three_jets', 4: 'four_jets'}

    njet_list = sorted(njet_name_dict.keys())
    # e.g., [0, 1, 2, 3, 4]

    event_dict = { }

    ## collect
    njet_list_ = list(njet_list)

    # nojet
    event_dict[0] = dict(pt=np.array([ ]), phi=np.array([ ]))
    njet_list_.remove(0)

    #
    for evt in tbl_scan_event.index:
        tbl_event = tbl_scan_event.loc[evt]
        tbl_jet = tbl_scan_jet.loc[[evt]]

        pt = tbl_jet.jet_pt.values
        phi = tbl_jet.jet_phi.values

        njet = int(tbl_event.njet)
        event_dict[njet] = dict(pt=pt, phi=phi)

        if njet not in njet_list_:
            continue

        njet_list_.remove(njet)
        if not njet_list_:
            break

    # print
    contents = [ ]
    for njet in njet_list:
        njet_name = njet_name_dict[njet]
        event = event_dict[njet]
        pt = event['pt']
        phi = event['phi']
        alt = AltDphi(pt=pt, phi=phi)
        dumped = dump_altdphi(alt)
        lines = ''
        lines = lines + '{} = dict(\n'.format(njet_name)
        lines = lines + '    pt =  [' + ', '.join(['{!r}'.format(v) for v in pt]) + '],\n'
        lines = lines + '    phi = [' + ', '.join(['{!r}'.format(v) for v in phi]) + '],\n'
        lines = lines + ')\n'
        lines = lines + '\n'
        lines = lines + 'altdphi_{} = {}\n'.format(njet_name, dumped)
        contents.append(lines)

    return '\n'.join(contents)

##__________________________________________________________________||
if __name__ == '__main__':
    main()
